# Position of a legend
theme(
legend.position = c(0.2, 0.8),
# Text size within the legend
legend.text = element_text(size = 13),
# Size of legend box colour
legend.key.size = unit(.6, "cm"),
# Remove borders around colours
legend.key = element_rect(colour = FALSE),
# Removed title of legend
legend.title = element_blank()
) +
# Background and border
# Adds white space around your plot
theme(
plot.margin = unit(c(.5, .5, .5, .5), "cm"),
# This adds a x axis line
axis.line.x = element_line(color = "black", size = 0.5),
# This adds a y axis line
axis.line.y = element_line(color = "black", size = 0.5),
# Removes grid
panel.grid.major = element_blank(),
# Removes more grid
panel.grid.minor = element_blank(),
# Removes grey background
panel.background = element_blank(),
#Removes lines around the plot
panel.border = element_blank()
)
return(output)
}
}
# Set Variables
{
# First, change your working directory to the folder with your data
# Data must be laid out as Time, Condition1, Condition2
# Filenames
learnerName = "../../Data/MedEd/R/ERP Data/learner.csv"
nonlearnerName = "../../Data/MedEd/R/ERP Data/learner.csv"
referenceName = "../../Data/MedEd/R/ERP Data/time.csv"
learnerSave = "../../Data/MedEd/Plots/learners.jpeg"
nonlearnerSave = "../../Data/MedEd/Plots/learners.jpeg"
# Condition Names
condition1 = "Win"
condition2 = "Loss"
condition3 = "Difference"
# Colours of your lines
lineColours = c("#505050", "#909090", "#000000")
# Type of line
lineTypes = c("solid", "solid", "dotted")
# Y Axis label
yLabels = expression(paste("Amplitude (", mu, "V)", sep = ""))
# Y Axis Range
yRange = c(-5, 16)
# X Axis label
xLabels = "Time (ms)"
}
# Load Data
{
learnerFile = t(read.csv(learnerName, header = FALSE))
nonlearnerFile = t(read.csv(nonlearnerName, header = FALSE))
referenceFile = t(read.csv(referenceName, header = FALSE))
learnerData = loadData(learnerFile, referenceFile, condition1, condition2, condition3)
nonlearnerData = loadData(nonlearnerFile,
referenceFile,
condition1,
condition2,
condition3)
}
# Plot Data
{
learnerPlot = plotERP(learnerData, lineColours, lineTypes, xLabels, yLabels, yRange)
nonlearnerPlot = plotERP(nonlearnerData,
lineColours,
lineTypes,
xLabels,
yLabels,
yRange)
print(learnerPlot)
print(nonlearnerPlot)
}
learnerFile = t(read.csv(learnerName, header = FALSE))
nonlearnerFile = t(read.csv(nonlearnerName, header = FALSE))
# Set Variables
{
# First, change your working directory to the folder with your data
# Data must be laid out as Time, Condition1, Condition2
# Filenames
learnerName = "../../Data/MedEd/R/ERP Data/learner.csv"
nonlearnerName = "../../Data/MedEd/R/ERP Data/nonlearner.csv"
referenceName = "../../Data/MedEd/R/ERP Data/time.csv"
learnerSave = "../../Data/MedEd/Plots/learners.jpeg"
nonlearnerSave = "../../Data/MedEd/Plots/learners.jpeg"
# Condition Names
condition1 = "Win"
condition2 = "Loss"
condition3 = "Difference"
# Colours of your lines
lineColours = c("#505050", "#909090", "#000000")
# Type of line
lineTypes = c("solid", "solid", "dotted")
# Y Axis label
yLabels = expression(paste("Amplitude (", mu, "V)", sep = ""))
# Y Axis Range
yRange = c(-5, 16)
# X Axis label
xLabels = "Time (ms)"
}
# Load Data
{
learnerFile = t(read.csv(learnerName, header = FALSE))
nonlearnerFile = t(read.csv(nonlearnerName, header = FALSE))
referenceFile = t(read.csv(referenceName, header = FALSE))
learnerData = loadData(learnerFile, referenceFile, condition1, condition2, condition3)
nonlearnerData = loadData(nonlearnerFile, referenceFile, condition1, condition2, condition3)
}
# Plot Data
{
learnerPlot = plotERP(learnerData, lineColours, lineTypes, xLabels, yLabels, yRange)
nonlearnerPlot = plotERP(nonlearnerData,
lineColours,
lineTypes,
xLabels,
yLabels,
yRange)
print(learnerPlot)
print(nonlearnerPlot)
}
yRange = c(-8, 16)
# Plot Data
{
learnerPlot = plotERP(learnerData, lineColours, lineTypes, xLabels, yLabels, yRange)
nonlearnerPlot = plotERP(nonlearnerData,
lineColours,
lineTypes,
xLabels,
yLabels,
yRange)
print(learnerPlot)
print(nonlearnerPlot)
}
# Save Plot - Here, we can save the plot as an image. This will save the current plot in your R plot tab.
# Output name was determined at the top of the script
{
ggsave(
filename = learnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
ggsave(
filename = nonlearnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
}
nonlearnerSave = "../../Data/MedEd/Plots/nonlearners.jpeg"
# Save Plot - Here, we can save the plot as an image. This will save the current plot in your R plot tab.
# Output name was determined at the top of the script
{
ggsave(
filename = learnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
ggsave(
filename = nonlearnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
}
# ERP Waveform plots created by Chad C. Williams from the University of Victoria's Neuroeconomics Laboratory, 2016.
# Modified by Jordan Middleton (C) 2019
# Load Libraries
{
library(reshape2)
library(ggplot2)
}
# Functions
{
loadData <-
function(dataFile1,
dataFile2,
condition1,
condition2,
condition3) {
# Load Data
dataFile = cbind(dataFile2, dataFile1)
# Change column names - This is important because it will be what appears in the legend
colnames(dataFile) = c("Time", condition1, condition2, condition3)
# The melt function transforms the columns in the measured variable from your data frame. Look over the new
# data frame and compare it to your original table to ensure you understand what the function did.
output = as.data.frame(dataFile[, c("Time", condition1, condition2, condition3)])
output = melt(output,
id = "Time",
measure = c(condition1, condition2, condition3))
return(output)
}
plotERP <-
function(dataFile,
lineColours,
lineTypes,
xLabels,
yLabels,
yRange) {
# Plot Data CW
# Creates your variable, designating the x and y column from your data frame, and the levels of your factor
yBreaks = c(-5, 0, 5, 10, 15)
xBreaks = round(seq(-200, 600, by = 100))
output = ggplot(dataFile,
aes(
x = Time,
y = value,
colour = variable,
linetype =  variable
)) +
# Determines the type of plot, size refers to the width of the lines
geom_freqpoly(stat = "identity", size = 1) +
# This adds a verticle dotted line at x = 0, this can be useful with ERP data, but you may want to remove this
# with other data
geom_vline(xintercept = 0, linetype = "dotted") +
# This adds a horizontal dotted line at y = 0, this can be useful with ERP data, but you may want to remove this
# with other data
geom_hline(yintercept = 0, linetype = "dotted") +
# Waveform Colours and Type
# Colours of your lines. This variable is defined above
scale_color_manual(values = lineColours) +
# The line type. Here, they are both solid but other options include dashed, dotted, and so forth
scale_linetype_manual(values = lineTypes) +
# Axis Scales
# This is a way to control the x axis labels. It ranges from min to max and puts a label every 5 datapoints
scale_y_continuous(limits = yRange,
breaks = yBreaks,
# Expand is so that the lines touch the y axis
expand = c(0, 0)) +
# This is a way to control the x axis labels. It ranges from min to max and puts a label every 100 datapoints
scale_x_continuous(breaks = xBreaks,
# Expand is so that the lines touch the y axis
expand = c(0, 0)) +
# Labels
# X axis label
xlab(xLabels) +
# Y axis label
ylab(yLabels) +
#Legend
# ggplot has several themes. You can look up different one's to see what it has to offer
theme_bw() +
# Position of a legend
theme(
legend.position = c(0.15, 0.8),
# Text size within the legend
legend.text = element_text(size = 13),
# Size of legend box colour
legend.key.size = unit(.6, "cm"),
# Remove borders around colours
legend.key = element_rect(colour = FALSE),
# Removed title of legend
legend.title = element_blank()
) +
# Background and border
# Adds white space around your plot
theme(
plot.margin = unit(c(.5, .5, .5, .5), "cm"),
# This adds a x axis line
axis.line.x = element_line(color = "black", size = 0.5),
# This adds a y axis line
axis.line.y = element_line(color = "black", size = 0.5),
# Removes grid
panel.grid.major = element_blank(),
# Removes more grid
panel.grid.minor = element_blank(),
# Removes grey background
panel.background = element_blank(),
#Removes lines around the plot
panel.border = element_blank()
)
return(output)
}
}
# Set Variables
{
# First, change your working directory to the folder with your data
# Data must be laid out as Time, Condition1, Condition2
# Filenames
learnerName = "../../Data/MedEd/R/ERP Data/learner.csv"
nonlearnerName = "../../Data/MedEd/R/ERP Data/nonlearner.csv"
referenceName = "../../Data/MedEd/R/ERP Data/time.csv"
learnerSave = "../../Data/MedEd/Plots/learners.jpeg"
nonlearnerSave = "../../Data/MedEd/Plots/nonlearners.jpeg"
# Condition Names
condition1 = "Win"
condition2 = "Loss"
condition3 = "Difference"
# Colours of your lines
lineColours = c("#505050", "#909090", "#000000")
# Type of line
lineTypes = c("solid", "solid", "dotted")
# Y Axis label
yLabels = expression(paste("Amplitude (", mu, "V)", sep = ""))
# Y Axis Range
yRange = c(-8, 16)
# X Axis label
xLabels = "Time (ms)"
}
# Load Data
{
learnerFile = t(read.csv(learnerName, header = FALSE))
nonlearnerFile = t(read.csv(nonlearnerName, header = FALSE))
referenceFile = t(read.csv(referenceName, header = FALSE))
learnerData = loadData(learnerFile, referenceFile, condition1, condition2, condition3)
nonlearnerData = loadData(nonlearnerFile, referenceFile, condition1, condition2, condition3)
}
# Plot Data
{
learnerPlot = plotERP(learnerData, lineColours, lineTypes, xLabels, yLabels, yRange)
nonlearnerPlot = plotERP(nonlearnerData,
lineColours,
lineTypes,
xLabels,
yLabels,
yRange)
print(learnerPlot)
print(nonlearnerPlot)
}
# Save Plot - Here, we can save the plot as an image. This will save the current plot in your R plot tab.
# Output name was determined at the top of the script
{
ggsave(
filename = learnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
ggsave(
filename = nonlearnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
}
# ERP Waveform plots created by Chad C. Williams from the University of Victoria's Neuroeconomics Laboratory, 2016.
# Modified by Jordan Middleton (C) 2019
# Load Libraries
{
library(reshape2)
library(ggplot2)
}
# Functions
{
loadData <-
function(dataFile1,
dataFile2,
condition1,
condition2,
condition3) {
# Load Data
dataFile = cbind(dataFile2, dataFile1)
# Change column names - This is important because it will be what appears in the legend
colnames(dataFile) = c("Time", condition1, condition2, condition3)
# The melt function transforms the columns in the measured variable from your data frame. Look over the new
# data frame and compare it to your original table to ensure you understand what the function did.
output = as.data.frame(dataFile[, c("Time", condition1, condition2, condition3)])
output = melt(output,
id = "Time",
measure = c(condition1, condition2, condition3))
return(output)
}
plotERP <-
function(dataFile,
lineColours,
lineTypes,
xLabels,
yLabels,
yRange) {
# Plot Data CW
# Creates your variable, designating the x and y column from your data frame, and the levels of your factor
yBreaks = c(-5, 0, 5, 10, 15)
xBreaks = round(seq(-200, 600, by = 100))
output = ggplot(dataFile,
aes(
x = Time,
y = value,
colour = variable,
linetype =  variable
)) +
# Determines the type of plot, size refers to the width of the lines
geom_freqpoly(stat = "identity", size = 1) +
# This adds a verticle dotted line at x = 0, this can be useful with ERP data, but you may want to remove this
# with other data
geom_vline(xintercept = 0, linetype = "dotted") +
# This adds a horizontal dotted line at y = 0, this can be useful with ERP data, but you may want to remove this
# with other data
geom_hline(yintercept = 0, linetype = "dotted") +
# Waveform Colours and Type
# Colours of your lines. This variable is defined above
scale_color_manual(values = lineColours) +
# The line type. Here, they are both solid but other options include dashed, dotted, and so forth
scale_linetype_manual(values = lineTypes) +
# Axis Scales
# This is a way to control the x axis labels. It ranges from min to max and puts a label every 5 datapoints
scale_y_continuous(limits = yRange,
breaks = yBreaks,
# Expand is so that the lines touch the y axis
expand = c(0, 0)) +
# This is a way to control the x axis labels. It ranges from min to max and puts a label every 100 datapoints
scale_x_continuous(breaks = xBreaks,
# Expand is so that the lines touch the y axis
expand = c(0, 0)) +
# Labels
# X axis label
xlab(xLabels) +
# Y axis label
ylab(yLabels) +
#Legend
# ggplot has several themes. You can look up different one's to see what it has to offer
theme_bw() +
# Position of a legend
theme(
legend.position = c(0.12, 0.8),
# Text size within the legend
legend.text = element_text(size = 13),
# Size of legend box colour
legend.key.size = unit(.6, "cm"),
# Remove borders around colours
legend.key = element_rect(colour = FALSE),
# Removed title of legend
legend.title = element_blank()
) +
# Background and border
# Adds white space around your plot
theme(
plot.margin = unit(c(.5, .5, .5, .5), "cm"),
# This adds a x axis line
axis.line.x = element_line(color = "black", size = 0.5),
# This adds a y axis line
axis.line.y = element_line(color = "black", size = 0.5),
# Removes grid
panel.grid.major = element_blank(),
# Removes more grid
panel.grid.minor = element_blank(),
# Removes grey background
panel.background = element_blank(),
#Removes lines around the plot
panel.border = element_blank()
)
return(output)
}
}
# Set Variables
{
# First, change your working directory to the folder with your data
# Data must be laid out as Time, Condition1, Condition2
# Filenames
learnerName = "../../Data/MedEd/R/ERP Data/learner.csv"
nonlearnerName = "../../Data/MedEd/R/ERP Data/nonlearner.csv"
referenceName = "../../Data/MedEd/R/ERP Data/time.csv"
learnerSave = "../../Data/MedEd/Plots/learners.jpeg"
nonlearnerSave = "../../Data/MedEd/Plots/nonlearners.jpeg"
# Condition Names
condition1 = "Win"
condition2 = "Loss"
condition3 = "Difference"
# Colours of your lines
lineColours = c("#505050", "#909090", "#000000")
# Type of line
lineTypes = c("solid", "solid", "dotted")
# Y Axis label
yLabels = expression(paste("Amplitude (", mu, "V)", sep = ""))
# Y Axis Range
yRange = c(-8, 16)
# X Axis label
xLabels = "Time (ms)"
}
# Load Data
{
learnerFile = t(read.csv(learnerName, header = FALSE))
nonlearnerFile = t(read.csv(nonlearnerName, header = FALSE))
referenceFile = t(read.csv(referenceName, header = FALSE))
learnerData = loadData(learnerFile, referenceFile, condition1, condition2, condition3)
nonlearnerData = loadData(nonlearnerFile, referenceFile, condition1, condition2, condition3)
}
# Plot Data
{
learnerPlot = plotERP(learnerData, lineColours, lineTypes, xLabels, yLabels, yRange)
nonlearnerPlot = plotERP(nonlearnerData,
lineColours,
lineTypes,
xLabels,
yLabels,
yRange)
print(learnerPlot)
print(nonlearnerPlot)
}
# Save Plot - Here, we can save the plot as an image. This will save the current plot in your R plot tab.
# Output name was determined at the top of the script
{
ggsave(
filename = learnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
ggsave(
filename = nonlearnerSave,
width = 6.54,
height = 4.36,
dpi = 600
)
}
